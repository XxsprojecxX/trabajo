import { NextRequest, NextResponse } from 'next/server';
import { BigQuery } from '@google-cloud/bigquery';

export const runtime = 'nodejs';

function normalizePilar(p: any): string {
  if (!p || typeof p !== 'string') return '';
  const k = p.trim().toLowerCase();
  if (k === 'dairy of real moms')   return 'Dairy of Real Moms';
  if (k === 'recipes that hug')     return 'Recipes that Hug';
  if (k === 'real family moments')  return 'Real Family Moments';
  if (k === 'authentic treats')     return 'Authentic Treats';
  return '';
}

type Env = {
  TOPICOS_VIEW?: 'v1'|'v2';
  TOPICOS_VIEW_V1_FQN?: string;
  TOPICOS_VIEW_V2_FQN?: string;
  BIGQUERY_PROJECT_ID?: string;
  GOOGLE_APPLICATION_CREDENTIALS?: string;
  BIGQUERY_SERVICE_ACCOUNT_JSON?: string;
  BIGQUERY_SERVICE_ACCOUNT_BASE64?: string;
};

function resolveView(env: Env) {
  const flag = String(env.TOPICOS_VIEW || 'v1').toLowerCase() as 'v1'|'v2';
  const v1 = env.TOPICOS_VIEW_V1_FQN || 'galletas-piloto-ju-250726.gmx.vw_social_post_with_pilar';
  const v2 = env.TOPICOS_VIEW_V2_FQN || v1;
  const viewFqn = flag === 'v2' ? v2 : v1;
  return { active: flag, viewFqn };
}

function getClient(env: Env) {
  const projectId = env.BIGQUERY_PROJECT_ID;
  const raw = env.BIGQUERY_SERVICE_ACCOUNT_JSON;
  const b64 = env.BIGQUERY_SERVICE_ACCOUNT_BASE64;

  if (raw || b64) {
    const jsonStr = raw ? raw : Buffer.from(String(b64), 'base64').toString('utf8');
    const creds = JSON.parse(jsonStr);
    const client_email = creds?.client_email;
    const private_key = creds?.private_key;
    if (!client_email || !private_key) throw new Error('CREDENCIAL_INCOMPLETA');
    return new BigQuery({ projectId, credentials: { client_email, private_key } });
  }
  return new BigQuery({ projectId, keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS });
}

export async function GET(req: NextRequest) {
  const env = process.env as unknown as Env;
  try {
    const { searchParams } = new URL(req.url);
    const limitRaw = searchParams.get('limit');
    const limit = Math.min(Number(limitRaw || 6), 50);
    const dryrun = searchParams.get('dryrun') === '1';

    const { active, viewFqn } = resolveView(env);

    if (dryrun) {
      return NextResponse.json({ ok: true, dryrun: true, active, view: viewFqn });
    }

    const bq = getClient(env);

    const query =
      'SELECT ' +
      '  post_id, text, create_time, post_url, likes, comments_count, play_count, ' +
      '  CAST(region AS STRING) AS region, source, pilar_normalizado ' +
      'FROM `' + viewFqn + '` ' +
      'ORDER BY create_time DESC ' +
      'LIMIT ${limit}';

    const [rows] = await bq.query({ query, params: { lim: Number(limit) } });

    const data = rows.map((r: any, i: number) => ({
      id: String(r.post_id != null ? r.post_id : 'post-' + i),
      nombre: String(r.text != null ? r.text : 'TÃ³pico'),
      volumen: Number(r.likes || 0) + 3 * Number(r.comments_count || 0),
      sentimiento: { positivo: 60, neutral: 25, negativo: 15 },
      emociones: { alegria: 0, enojo: 0, sorpresa: 0, miedo: 0, tristeza: 0, nostalgia: 0, ternura: 0, orgullo: 0, estres: 0, culpa: 0, cansancio: 0 },
      engagement: 0,
      oportunidad: 90 + ((i * 3) % 10),
      x: 200 + ((i * 120) % 600),
      y: 160 + ((i * 90) % 300),
      conexiones: [],
      categoria: String(r.source != null ? r.source : 'General'),
      ejesDetectados: [],
      pilarAsociado: normalizePilar(r.pilar_normalizado),
      capitalSimbolicoDetectado: [],
      nseInferido: 'Mixto',
      contextoTerritorial: String(r.region != null ? r.region : 'Mixto'),
      estadosResonancia: [],
    }));

    return NextResponse.json({ count: data.length, rows: data }, { status: 200 });
  } catch (e: any) {
    return NextResponse.json({ error: 'internal_error', message: String(e?.message || e) }, { status: 500 });
  }
}
