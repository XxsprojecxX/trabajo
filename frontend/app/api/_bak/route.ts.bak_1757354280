import { NextRequest, NextResponse } from 'next/server';
export const runtime = 'nodejs';

function normalizePilar(p: any): string {
  if (!p || typeof p !== 'string') return '';
  const k = p.trim().toLowerCase();
  if (k === 'dairy of real moms')   return 'Dairy of Real Moms';
  if (k === 'recipes that hug')     return 'Recipes that Hug';
  if (k === 'real family moments')  return 'Real Family Moments';
  if (k === 'authentic treats')     return 'Authentic Treats';
  return '';
}

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const limit = Math.min(Number(searchParams.get('limit') ?? 6), 50);

    // ¿Forzar mock? => /api/topicos?mock=1
    if (searchParams.get('mock') === '1') {
      const seed = [
        { id: 'm1', nombre: 'Post ejemplo 1', volumen: 120, categoria: 'IG', pilarAsociado: 'Dairy of Real Moms' },
        { id: 'm2', nombre: 'Post ejemplo 2', volumen: 90,  categoria: 'TT', pilarAsociado: 'Recipes that Hug' },
        { id: 'm3', nombre: 'Post ejemplo 3', volumen: 70,  categoria: 'IG', pilarAsociado: 'Real Family Moments' },
        { id: 'm4', nombre: 'Post ejemplo 4', volumen: 55,  categoria: 'TT', pilarAsociado: 'Authentic Treats' },
        { id: 'm5', nombre: 'Post ejemplo 5', volumen: 40,  categoria: 'IG', pilarAsociado: '' },
        { id: 'm6', nombre: 'Post ejemplo 6', volumen: 35,  categoria: 'TT', pilarAsociado: 'ALMA' },
      ].slice(0, limit);
      const rows = seed.map((r, i) => ({
        id: r.id,
        nombre: r.nombre,
        volumen: r.volumen,
        sentimiento: { positivo: 60, neutral: 25, negativo: 15 },
        emociones: { alegria: 0, enojo: 0, sorpresa: 0, miedo: 0, tristeza: 0, nostalgia: 0, ternura: 0, orgullo: 0, estres: 0, culpa: 0, cansancio: 0 },
        engagement: Math.round(r.volumen / 10),
        oportunidad: 90 + ((i * 3) % 10),
        x: 200 + ((i * 120) % 600),
        y: 160 + ((i * 90) % 300),
        conexiones: [],
        categoria: r.categoria,
        ejesDetectados: [],
        pilarAsociado: normalizePilar(r.pilarAsociado),
        capitalSimbolicoDetectado: [],
        nseInferido: 'Mixto',
        contextoTerritorial: 'Mixto',
        estadosResonancia: [],
      }));
      return NextResponse.json({ count: rows.length, rows }, { status: 200 });
    }

    const { BigQuery } = await import('@google-cloud/bigquery');
    const bq = new BigQuery({
      projectId: 'galletas-piloto-ju-250726',
      keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS as string,
    });

    const query = `
      SELECT
        post_id,
        text,
        create_time,
        post_url,
        likes,
        comments_count,
        play_count,
        CAST(region AS STRING) AS region,
        source,
        pilar_normalizado
      FROM \`galletas-piloto-ju-250726.gmx.vw_social_post_with_pilar\`
      ORDER BY create_time DESC
      LIMIT @lim
    `;

    const [rows] = await bq.query({ query, params: { lim: Number(limit) }, location: 'US' });

    const data = rows.map((r: any, i: number) => ({
      id: String(r.post_id ?? `post-${i}`),
      nombre: String(r.text ?? 'Tópico'),
      volumen: Number(r.likes ?? 0) + 3 * Number(r.comments_count ?? 0),
      sentimiento: { positivo: 60, neutral: 25, negativo: 15 },
      emociones: { alegria: 0, enojo: 0, sorpresa: 0, miedo: 0, tristeza: 0, nostalgia: 0, ternura: 0, orgullo: 0, estres: 0, culpa: 0, cansancio: 0 },
      engagement: 0,
      oportunidad: 90 + ((i * 3) % 10),
      x: 200 + ((i * 120) % 600),
      y: 160 + ((i * 90) % 300),
      conexiones: [],
      categoria: String(r.source ?? 'General'),
      ejesDetectados: [],
      pilarAsociado: normalizePilar(r.pilar_normalizado),
      capitalSimbolicoDetectado: [],
      nseInferido: 'Mixto',
      contextoTerritorial: String(r.region ?? 'Mixto'),
      estadosResonancia: [],
    }));

    return NextResponse.json({ count: data.length, rows: data }, { status: 200 });
  } catch (e: any) {
    return NextResponse.json({ error: 'internal_error', message: String(e?.message || e) }, { status: 500 });
  }
}
