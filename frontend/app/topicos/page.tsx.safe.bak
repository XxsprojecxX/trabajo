"use client";
import React, { useEffect, useMemo, useState } from "react";

type Topico = {
  id: string;
  nombre: string;
  volumen?: number;
  volume?: number;
  categoria?: string;
  pilar?: string;
  pilarAsociado?: string;
  x?: number;
  y?: number;
  coords?: { x: number; y: number } | null;
};

export default function TopicosPage() {
  const [rows, setRows] = useState<Topico[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Modal state
  const [open, setOpen] = useState(false);
  const [selected, setSelected] = useState<Topico | null>(null);

  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        setLoading(true);
        const res = await fetch("/api/topicos?limit=30", { headers: { Accept: "application/json" }});
        const data = await res.json();
        if (!cancelled) {
          const arr: Topico[] = Array.isArray(data?.rows) ? data.rows : [];
          setRows(arr);
          setError(null);
        }
      } catch (e:any) {
        if (!cancelled) setError(String(e?.message || e));
      } finally {
        if (!cancelled) setLoading(false);
      }
    })();
    return () => { cancelled = true; };
  }, []);

  const nodes = useMemo(() => {
    const grid = (i:number) => {
      const cols = 4, gutter = 220;
      const r = Math.floor(i / cols), c = i % cols;
      return { x: 140 + c * gutter, y: 120 + r * gutter };
    };
    return rows.map((t, i) => {
      const v = (t.volume ?? t.volumen ?? 1);
      const size = Math.max(40, Math.min(240, Math.sqrt(v) * 10)); // mapeo suave por volumen
      const px = (t.coords?.x ?? t.x ?? grid(i).x);
      const py = (t.coords?.y ?? t.y ?? grid(i).y);
      return { ...t, px, py, size };
    });
  }, [rows]);

  return (
    <div className="min-h-screen bg-white">
      <div className="px-6 py-6 flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Tópicos — Vista Pack (v2)</h1>
        <div className="text-sm text-gray-500">Fuente viva <code>/api/topicos</code> (v2)</div>
      </div>

      {loading && <div className="px-6 text-sm text-gray-500">Cargando…</div>}
      {error && <div className="px-6 text-sm text-red-600">Error: {error}</div>}

      <div className="relative mx-4 mb-10 rounded-xl border bg-white" style={{height: 720, overflow: "hidden"}}>
        {nodes.map((n) => {
          const vol = n.volume ?? n.volumen ?? 0;
          return (
            <div
              key={n.id}
              title={`${n.pilarAsociado || n.pilar || "Pilar estratégico"} • Volumen: ${vol} • Cat: ${n.categoria ?? "—"}`}
              className="absolute rounded-full border border-gray-200 bg-white shadow-sm hover:shadow-md transition-shadow cursor-pointer"
              style={{
                left: (n as any).px - (n as any).size/2,
                top: (n as any).py - (n as any).size/2,
                width: (n as any).size,
                height: (n as any).size,
              }}
              onClick={() => { setSelected(n); setOpen(true); }}
            >
              <div className="w-full h-full flex flex-col items-center justify-center px-3 text-center">
                <div className="text-[11px] text-gray-500 uppercase tracking-wide">
                  {n.pilarAsociado || n.pilar || 'PILAR ESTRATÉGICO'}
                </div>
                <div className="mt-1 text-[12px] leading-tight line-clamp-3">
                  {n.nombre ?? '—'}
                </div>
                <div className="mt-2 text-[11px] text-gray-500">
                  Volumen: <span className="font-medium">{vol}</span> · Cat: {n.categoria ?? '—'}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <div className="px-6 pb-8 text-sm text-gray-500">
        * Si algún tópico no trae <code>coords</code> de la fuente viva, se ubica en grilla determinista (fallback); tamaño por <code>volume</code>.
      </div>

      {/* Modal básico (sin enriquecimiento aún) */}
      {open && selected && (
        <div className="fixed inset-0 z-50">
          <div className="absolute inset-0 bg-black/40" onClick={() => setOpen(false)} />
          <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[720px] max-w-[92vw] rounded-2xl bg-white shadow-xl border">
            <div className="p-5 border-b flex items-center justify-between">
              <div className="text-sm text-gray-500 uppercase">{selected.pilarAsociado || selected.pilar || "Pilar estratégico"}</div>
              <button className="px-3 py-1 text-sm rounded-md border hover:bg-gray-50" onClick={() => setOpen(false)}>Cerrar</button>
            </div>
            <div className="p-5">
              <div className="text-lg font-medium leading-snug mb-2">{selected.nombre || "—"}</div>
              <div className="text-sm text-gray-500 mb-4">Cat: {selected.categoria ?? "—"} · Volumen: {selected.volume ?? selected.volumen ?? 0}</div>
              <div className="rounded-lg bg-gray-50 border p-4 text-sm text-gray-700">
                Este modal mostrará ALMA, emociones, resonancia y capital simbólico del tópico con prioridad datos reales → enriquecidos.
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
