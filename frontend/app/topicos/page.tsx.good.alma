'use client';
import { useEffect, useMemo, useState } from 'react';
import Link from 'next/link';

/** Tipado laxo y opcional: nada rompe si falta */
type Sentimiento = { positivo?: number; neutral?: number; negativo?: number };
type Emociones = Partial<Record<
  | 'alegria' | 'enojo' | 'sorpresa' | 'miedo' | 'tristeza'
  | 'nostalgia' | 'ternura' | 'orgullo' | 'estres' | 'culpa' | 'cansancio',
  number
>>;
type EstadoResonancia = { estado: string; porcentaje: number; intensidad: 'alta'|'media'|'baja' };

export interface Topico {
  id: string;
  nombre?: string;
  volumen?: number; // fuente v2
  volume?: number;  // otras fuentes
  sentimiento?: Sentimiento;
  emociones?: Emociones;
  engagement?: number;
  oportunidad?: number;
  categoria?: string;
  ejesDetectados?: string[];
  pilarAsociado?: string; // mayúsculas
  pilar?: string;         // variantes
  capitalSimbolicoDetectado?: string[];
  nseInferido?: string;
  contextoTerritorial?: string;
  estadosResonancia?: EstadoResonancia[];
  coords?: { x?: number; y?: number };
  x?: number;
  y?: number;
  conexiones?: string[];
}

/** Fallback mínimo en memoria (puedes sustituir por tu proxy “Gemini” cuando esté listo) */
const SAMPLE_TOPICOS: Topico[] = [
  { id: 's1', nombre: 'maternidad auténtica', volumen: 24, categoria: 'instagram', pilarAsociado: 'DAIRY OF REAL MOMS' },
  { id: 's2', nombre: 'recetas que abrazan', volumen: 21, categoria: 'instagram', pilarAsociado: 'RECIPES THAT HUG' },
  { id: 's3', nombre: 'momentos en familia', volumen: 18, categoria: 'instagram', pilarAsociado: 'REAL FAMILY MOMENTS' },
];

function gridPos(i: number) {
  const cols = 6;
  const gutter = 160;
  const r = Math.floor(i / cols), c = i % cols;
  return { x: 140 + c * gutter, y: 140 + r * gutter };
}

function withSafeLayout(rows: Topico[]) {
  return rows.map((t, i) => {
    const v = (t.volume ?? t.volumen ?? 1);
    const size = Math.max(40, Math.min(240, Math.sqrt(v) * 10));
    const px = (t.coords?.x ?? t.x ?? gridPos(i).x);
    const py = (t.coords?.y ?? t.y ?? gridPos(i).y);
    return { ...t, px, py, size } as Topico & { px: number; py: number; size: number };
  });
}

async function fetchTopicos(signal: AbortSignal): Promise<Topico[]> {
  const url = '/api/topicos?limit=120';
  try {
    const res = await fetch(url, { signal, cache: 'no-store' });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json().catch(() => ({}));
    const rows: Topico[] = Array.isArray(data?.items) ? data.items : (Array.isArray(data) ? data : []);
    if (rows.length === 0) throw new Error('API vacía');
    return rows;
  } catch {
    // Fallback local (luego puedes enchufar aquí tu “Gemini/proxy”)
    return SAMPLE_TOPICOS;
  }
}

function PilarLabel(p?: string) {
  if (!p) return '';
  const k = p.trim().toLowerCase();
  if (k === 'dairy of real moms') return 'DAIRY OF REAL MOMS';
  if (k === 'recipes that hug') return 'RECIPES THAT HUG';
  if (k === 'real family moments') return 'REAL FAMILY MOMENTS';
  if (k === 'authentic treats') return 'AUTHENTIC TREATS';
  return p;
}

export default function TopicosPage() {
  const [rows, setRows] = useState<Topico[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selected, setSelected] = useState<(Topico & { px?: number; py?: number; size?: number }) | null>(null);
  const [open, setOpen] = useState(false);

  useEffect(() => {
    const ctr = new AbortController();
    (async () => {
      setLoading(true); setError(null);
      try {
        const data = await fetchTopicos(ctr.signal);
        setRows(
          data.map((t) => ({
            conexiones: [],
            ...t,
            ejesDetectados: t.ejesDetectados ?? [],
            capitalSimbolicoDetectado: t.capitalSimbolicoDetectado ?? [],
          }))
        );
      } catch (e: any) {
        setError(e?.message ?? 'Error de carga');
      } finally {
        setLoading(false);
      }
    })();
    return () => ctr.abort();
  }, []);

  const nodes = useMemo(() => withSafeLayout(rows), [rows]);

  return (
    <div className="min-h-screen bg-white">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Link href="/" className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center">
                  <i className="ri-brain-line text-white text-xl"></i>
                </div>
                <h1 className="text-2xl font-bold text-gray-900">Content Insight</h1>
              </Link>
            </div>
            <nav className="flex items-center space-x-6">
              <Link href="/" className="text-gray-600 hover:text-blue-600 transition-colors">Inicio</Link>
              <Link href="/topicos" className="text-blue-600 font-semibold">Tópicos</Link>
              <Link href="/contenidos" className="text-gray-600 hover:text-blue-600 transition-colors">Contenidos</Link>
              <Link href="/insights" className="text-gray-600 hover:text-blue-600 transition-colors">Insights</Link>
            </nav>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-6">
          <h2 className="text-3xl font-bold text-gray-900">Tópicos de Conversación</h2>
          <p className="text-gray-600">Mapa con fallback automático si la API no entrega datos completos.</p>
        </div>

        {loading && <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6 text-blue-800">Cargando datos…</div>}
        {error && <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-6 text-red-800">Error: {error}</div>}

        <div className="relative bg-white rounded-xl shadow-sm p-6 h-[700px] overflow-hidden border border-gray-200">
          {/* Conexiones seguras */}
          <svg width="100%" height="100%" className="absolute inset-0">
            {nodes.map((a) =>
              (a.conexiones ?? []).map((bid) => {
                const b = nodes.find((t) => t.id === bid);
                if (!b || a.id === b.id) return null;
                return (
                  <line
                    key={`${a.id}-${bid}`}
                    x1={Number((a as any).px)} y1={Number((a as any).py)}
                    x2={Number((b as any).px)} y2={Number((b as any).py)}
                    stroke="#e5e7eb" strokeWidth="2" opacity="0.6"
                  />
                );
              })
            )}
          </svg>

          {/* Nodos */}
          {nodes.map((n) => {
            const vol = n.volume ?? n.volumen ?? 0;
            const pilar = PilarLabel(n.pilarAsociado ?? n.pilar ?? 'PILAR ESTRATÉGICO');
            return (
              <div
                key={n.id}
                title={`${pilar} • Volumen: ${vol} • Cat: ${n.categoria ?? "—"}`}
                className="absolute rounded-full border border-gray-200 bg-white shadow-sm hover:shadow-md transition-shadow cursor-pointer"
                style={{
                  left: (n as any).px - (n as any).size/2,
                  top: (n as any).py - (n as any).size/2,
                  width: (n as any).size,
                  height: (n as any).size,
                }}
                onClick={() => { setSelected(n); setOpen(true); }}
              >
                <div className="w-full h-full flex flex-col items-center justify-center px-3 text-center">
                  <div className="text-[11px] text-gray-500 uppercase tracking-wide">{pilar}</div>
                  <div className="mt-1 text-[12px] leading-tight line-clamp-3">{n.nombre ?? '—'}</div>
                  <div className="mt-2 text-[11px] text-gray-500">Volumen: <span className="font-medium">{vol}</span> · Cat: {n.categoria ?? '—'}</div>
                </div>
              </div>
            );
          })}
        </div>

        <div className="px-1 py-4 text-xs text-gray-500">
          * Si no hay `coords` de la fuente viva se usa grilla determinista (fallback); tamaño por `volume/volumen`.
        </div>
      </div>

      {/* Modal seguro (solo muestra lo que exista) */}
      {open && selected && (
        <div className="fixed inset-0 z-50">
          <div className="absolute inset-0 bg-black/40" onClick={() => setOpen(false)} />
          <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[720px] max-w-[92vw] rounded-2xl bg-white shadow-xl border">
            <div className="p-5 border-b flex items-center justify-between">
              <div className="text-sm text-gray-500 uppercase">{PilarLabel(selected.pilarAsociado ?? selected.pilar ?? 'Pilar estratégico')}</div>
              <button className="px-3 py-1 text-sm rounded-md border hover:bg-gray-50" onClick={() => setOpen(false)}>Cerrar</button>
            </div>
            <div className="p-5 space-y-3">
              <div className="text-lg font-medium leading-snug">{selected.nombre || "—"}</div>
              <div className="text-sm text-gray-500">Cat: {selected.categoria ?? "—"} · Volumen: {selected.volume ?? selected.volumen ?? 0}</div>

              {/* Bloques ALMA protegidos por guards */}
              {(selected.ejesDetectados?.length ?? 0) > 0 && (
                <div className="rounded-lg bg-purple-50 border border-purple-200 p-3">
                  <div className="font-semibold text-purple-800 mb-1">Ejes Framework ALMA</div>
                  <ul className="list-disc ml-5 text-sm text-purple-900">
                    {selected.ejesDetectados!.map((e, i) => <li key={i}>{e}</li>)}
                  </ul>
                </div>
              )}

              {(selected.capitalSimbolicoDetectado?.length ?? 0) > 0 && (
                <div className="rounded-lg bg-blue-50 border border-blue-200 p-3">
                  <div className="font-semibold text-blue-800 mb-1">Capital Simbólico Detectado</div>
                  <ul className="list-disc ml-5 text-sm text-blue-900">
                    {selected.capitalSimbolicoDetectado!.map((c, i) => <li key={i}>{c}</li>)}
                  </ul>
                </div>
              )}

              {(selected.emociones && Object.keys(selected.emociones).length > 0) && (
                <div className="rounded-lg bg-pink-50 border border-pink-200 p-3">
                  <div className="font-semibold text-pink-800 mb-1">Mapa Emocional</div>
                  <div className="grid grid-cols-2 gap-2 text-sm text-pink-900">
                    {Object.entries(selected.emociones!).map(([k, v]) => (
                      <div key={k} className="flex items-center justify-between">
                        <span className="capitalize">{k}</span>
                        <span className="font-semibold">{v}%</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {(selected.nseInferido || selected.contextoTerritorial) && (
                <div className="rounded-lg bg-green-50 border border-green-200 p-3 text-sm text-green-900">
                  {selected.nseInferido && <div><span className="font-semibold">NSE:</span> {selected.nseInferido}</div>}
                  {selected.contextoTerritorial && <div><span className="font-semibold">Contexto:</span> {selected.contextoTerritorial}</div>}
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
